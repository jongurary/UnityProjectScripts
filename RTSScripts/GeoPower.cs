using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GeoPower : MonoBehaviour {

	public float outputFactor; //scaling factor for power output
	public GameObject geoNode;
	public int output; //output in watts when operational, generated by each borehole

	public GameObject[] smoke;
	public GameObject flameSputter; //fire generated from lava when a new borehole is drilled

	private PowerControl pow;
	private int boreHoleCost = 50000;
	private int maxBoreHoles=5;
	private int currentBoreHoles;
	
	void OnCollisionEnter(Collision collision) {
		if ( collision.transform.root.CompareTag ("ResourceDeposit") ) {
			geoNode = collision.transform.gameObject;
			var geoEmin = geoNode.GetComponentInChildren<ParticleSystem>().emission; //NOTE: there should be only one child particle system
			geoEmin.rateOverTime = 10;
	//		geoNode.GetComponentInChildren<ParticleSystem>().Stop (); 
			foreach (GameObject obj in smoke) {
				obj.GetComponent<ParticleSystem>().Play ();
			}

			StartCoroutine(ChangeOutput());
		}
	}

	void Start () {
		pow = GetComponent<PowerControl> ();

		foreach (GameObject obj in smoke) {
			obj.GetComponent<ParticleSystem>().Stop ();
		}
		currentBoreHoles = 1;
		
	}

	void Update () {

		if (GetComponent<Controls> ().isSelected() ) {

			if (Input.GetKeyDown ("z")) {
				if (!pow.isEmpty (boreHoleCost) && currentBoreHoles < maxBoreHoles) {
					pow.drain (boreHoleCost);
					drillBoreHole();
				}else{
					//not enough power or max boreholes error
				}
			}
		}
	}

	IEnumerator ChangeOutput (){
		while (true) {
			pow.setWatts( (int) (output * outputFactor * currentBoreHoles));
			yield return new WaitForSeconds(3f); //unimportant, can be a long interval
		}
	}

	/// <summary>
	/// Spends a tremendous amount of energy to drill a new hole in the ground, increasing energy output
	/// </summary>
	public void drillBoreHole(){
		//Note: power check moved to Controls module
		//if (!pow.isEmpty (boreHoleCost) && currentBoreHoles < maxBoreHoles) {
		//	pow.drain (boreHoleCost);
			currentBoreHoles++; 
			flameSputter.GetComponent<ParticleSystem> ().Emit (40);
		//} else {
			//not enough power or max boreholes error
		//}
	}

	void onDestroy(){
		geoNode.GetComponentInChildren<ParticleSystem>().Play (); //NOTE: there should be only one child particle system
	}

	/// <summary>
	/// Boreholes currently in operation
	/// </summary>
	public int getBoreHoles(){ return currentBoreHoles; }

	/// <summary>
	/// Max boreholes supported by this unit
	/// </summary>
	public int getMaxBoreHoles(){ return maxBoreHoles; }

	}
